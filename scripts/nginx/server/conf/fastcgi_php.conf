#fastcgi_index  index.php/index.cgi;

fastcgi_split_path_info ^(.+\.php)(.*)$;
fastcgi_param  REMOTE_USER	$remote_user;
fastcgi_param  PATH_INFO $fastcgi_path_info;
fastcgi_param  SCRIPT_FILENAME	$document_root$fastcgi_script_name;
fastcgi_param  PATH_TRANSLATED	$document_root$fastcgi_path_info;

#包含默认模块
include        fastcgi_params;

#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。

#用哪个缓存空间，开启FastCGI缓存并且为其制定一个名称。
#个人感觉开启缓存非常有用，可以有效降低CPU负载，并且防止502错误。但是这个缓存会引起很多问题，因为它缓存的是动态页面。具体使用还需根据自己的需求。
#fastcgi_cache cache_php;  

#定义fastcgi_cache的key，本处就以请求的URI作为缓存的key，Nginx会取这个key的md5作为缓存文件，如果设置了缓存哈希目录，Nginx会从后往前取相应的位数做为目录
#fastcgi_cache_key $host$request_uri;

#定义哪些http头要缓存，为指定的应答代码指定缓存时间，如上例中将200，302应答缓存一小时，301应答缓存1天，其他为1分钟。
#fastcgi_cache_valid 200 302 1h;
#fastcgi_cache_valid 301 1d;
#fastcgi_cache_valid any 1m;

#URL经过多少次请求将被缓存，缓存在fastcgi_cache_path指令inactive参数值时间内的最少使用次数，如果在特定分钟内某文件1次也没有被使用，那么这个文件将被移除。
#fastcgi_cache_min_uses 1;

#定义哪些情况下用过期缓存
#fastcgi_cache_use_stale error timeout invalid_header http_500;

fastcgi_connect_timeout 300;  #指定连接到后端FastCGI的超时时间
fastcgi_send_timeout 300;  #向FastCGI传送请求的超时时间，这个值是指已经完成两次握手后向FastCGI传送请求的超时时间。
fastcgi_read_timeout 300;  #接收FastCGI应答的超时时间，这个值是指已经完成两次握手后接收FastCGI应答的超时时间。

#指定读取FastCGI应答第一部分需要用多大的缓冲区，这里可以设置为fastcgi_buffers指令指定的缓冲区大小，
#上面的指令指定它将使用1个16k的缓冲区去读取应答的第一部分，即应答头，其实这个应答头一般情况下都很小（不会超过1k），
#但是你如果在fastcgi_buffers指令中指定了缓冲区的大小，那么它也会分配一个fastcgi_buffers指定的缓冲区大小去缓存。
fastcgi_buffer_size 64k;

#指定本地需要用多少和多大的缓冲区来缓冲FastCGI的应答，
#如上所示，如果一个php脚本所产生的页面大小为256k，则会为其分配16个16k的缓冲区来缓存，如果大于256k，
#增大于256k的部分会缓存到fastcgi_temp指定的路径中，当然这对服务器负载来说是不明智的方案，因为内存中处理数据速度要快于硬盘，
#通常这个值的设置应该选择一个你的站点中的php脚本所产生的页面大小的中间值，
#比如你的站点大部分脚本所产生的页面大小为256k就可以把这个值设置为16 16k，或者4 64k 或者64 4k，
#但很显然，后两种并不是好的设置方法，因为如果产生的页面只有32k，如果用4 64k它会分配1个64k的缓冲区去缓存，
#而如果使用64 4k它会分配8个4k的缓冲区去缓存，而如果使用16 16k则它会分配2个16k去缓存页面，这样看起来似乎更加合理。
fastcgi_buffers 4 64k;
fastcgi_busy_buffers_size 128k;  #默认值是fastcgi_buffers的两倍
fastcgi_temp_file_write_size 128k;  #在写入fastcgi_temp_path时将用多大的数据块，默认值是fastcgi_buffers的两倍

#开启错误模块
fastcgi_intercept_errors on;

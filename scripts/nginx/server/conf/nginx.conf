#定义Nginx运行的用户和用户组
user  project orsys;

#Nginx进程数，建议设置为等于CPU总核心数(如,2个四核的cpu计为8)。
worker_processes  auto;

#为每个进程分配cpu，worker_processes中将多个进程分配到8个cpu，当然可以写多个，或者将一个进程分配到多个cpu
worker_cpu_affinity 00000001 00000010 00000100 00001000; # 00010000 00100000 01000000 10000000;

#更改Nginx进程的最大打开文件数限制，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，该值控制 “too many open files” 的问题
worker_rlimit_nofile 65535;  #此处为65535/4

#进程文件
pid tmp/sys-nginx.pid;

#google-perftools的加载
google_perftools_profiles tmp/tcmalloc;

#工作模式与连接数上限
events {
    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型。
    use epoll;
    multi_accept on; #告诉nginx收到一个新连接通知后接受尽可能多的连接。
    accept_mutex off;
    worker_connections  65535; #单个进程最大连接数（最大连接数=连接数*进程数），1核默认配8000。
}

http {
    #文件扩展名与文件类型映射表
    include mime.types;

    #默认文件类型
    default_type  text/html;

    #默认编码
    charset utf-8;

    #日志格式设定
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  json  '{"@timestamp":"$time_iso8601",'
                      '"slb_user":"$remote_user",'
                      '"slb_ip":"$remote_addr",'
                      '"client_ip":"$http_x_forwarded_for",'
                      '"server_ip":"$server_addr",'
                      '"size":$body_bytes_sent,'
                      '"response_time":$request_time,'
                      '"domain":"$host",'
                      '"method":"$request_method",'
                      '"request_uri":"$request_uri",'
                      '"url":"$uri",'
                      '"app_version":"$HTTP_APP_VERSION",'
                      '"referer":"$http_referer",'
                      '"agent":"$http_user_agent",'
                      '"status":"$status",'
                      '"device_code":"$HTTP_HA",'
                      '"upstream_response_time":$upstream_response_time,'
                      '"upstream_addr":"$upstream_addr",'
                      '"upstream_status":"$upstream_status",'
                      '"upstream_cache_status":"$upstream_cache_status"}';

    #是否开启重写日志
    rewrite_log on;

    #日志文件缓存
    #   max:设置缓存中的最大文件描述符数量，如果缓存被占满，采用LRU算法将描述符关闭。
    #   inactive:设置存活时间，默认是10s
    #   min_uses:设置在inactive时间段内，日志文件最少使用多少次后，该日志文件描述符记入缓存中，默认是1次
    #   valid:设置检查频率，默认60s
    #   off：禁用缓存
    #open_log_file_cache max=1000 inactive=20s valid=1m min_uses=2;

    #关闭在错误页面中的nginx版本数字
    server_tokens off;

    #服务器名字的hash表大小
    server_names_hash_bucket_size 128; 

    #上传文件大小限制，一般一个请求的头部大小不会超过1k
    client_header_buffer_size 4k; 

    #设定请求缓存
    large_client_header_buffers 4 64k; 

    #设定请求缓存
    client_max_body_size 8m; 

    #开启目录列表访问，合适下载服务器，默认关闭。
    autoindex off; 

    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件。
    #对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。
    #注意：如果图片显示不正常把这个改成off。
    sendfile        on;
    sendfile_max_chunk 512k;  #该指令可以减少阻塞方法 sendfile() 调用的所花费的最大时间，每次无需发送整个文件，只发送 512KB 的块数据

    #通用代理设置
    proxy_headers_hash_max_size 51200; #设置头部哈希表的最大值，不能小于你后端服务器设置的头部总数
    proxy_headers_hash_bucket_size 6400; #设置头部哈希表大小

    tcp_nopush on; #防止网络阻塞(告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送)
    tcp_nodelay on; #防止网络阻塞(告诉nginx不要缓存数据，而是一段一段的发送，当需要及时发送数据时，就应该给应用设置这个属性)

    #长连接超时时间，单位是秒
    keepalive_timeout 15; 

    #设置请求头的超时时间
    client_header_timeout 5;

    #设置请求体的超时时间
    client_body_timeout 10;

    #关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。
    reset_timedout_connection on;

    #指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。
    send_timeout 10; 

    #为FastCGI缓存指定一个路径，目录结构等级，关键字区域存储时间和非活动删除时间。
    #fastcgi_cache_path /clouddisk/attach/openresty/fastcgi_cache levels=1:2 keys_zone=cache_php:64m inactive=5m max_size=10g;  

    #gzip模块设置
    gzip on; #开启gzip压缩输出
    gzip_disable 'msie6'; #为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容。
    gzip_proxied any; #允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。
    gzip_min_length 1k; #最小压缩文件大小
    gzip_buffers 16 8k; #压缩缓冲区
    gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
    gzip_comp_level 6; #压缩等级
    gzip_types text/plain 
               text/css 
               text/xml 
               text/javascript 
               application/json 
               application/javascript
               application/x-httpd-php 
               application/x-javascript 
               application/xml 
               application/xml+rss 
               image/jpeg 
               image/gif 
               image/png
               image/svg+xml;

    #设置需要压缩的数据格式
    gzip_vary on;

    #limit_conn_zone $binary_remote_addr zone=addr:10m; #开启限制IP连接数的时候需要使用
    #limit_conn_log_level info;

    #指定DNS服务器的地址
    resolver 223.5.5.5 223.6.6.6;

    #定义一个名为 default 的线程池，拥有 32 个工作线程，任务队列容纳的最大请求数为 65536。一旦任务队列过载，NGINX日志会报错并拒绝这一请求
    #thread_pool default threads=32 max_queue=65536;

    # cache informations about file descriptors, frequently accessed files 
    # can boost performance, but you need to test those values 
    open_file_cache max=65536 inactive=10s; # 打开缓存的同时也指定了缓存最大数目，以及缓存的时间
    open_file_cache_valid 30s; #在open_file_cache中指定检测正确信息的间隔时间
    open_file_cache_min_uses 1; #定义了open_file_cache中指令参数不活动时间期间里最小的文件数
    open_file_cache_errors on; #指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件

    # 包含所有的虚拟主机的配置文件
    include vhosts/*.conf;
}	

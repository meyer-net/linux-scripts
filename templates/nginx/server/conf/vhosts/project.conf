server {
    #监听端口
    listen       %prj_port%;

    #编码
    charset   utf-8;

    #默认访问类型
    default_type text/html;

    #域名可以有多个，用空格隔开
    server_name 127.0.0.1;

    #开启目录浏览功能
    #autoindex on;

    #文件大小从KB开始显示
    autoindex_exact_size off;

    #显示文件修改时间为服务器本地时间
    autoindex_localtime on;

    #访问根路径
    root %prj_dir%;

    #定义本虚拟主机的访问日志
    access_log logs/%prj_name%.log combined buffer=1k;
    error_log logs/%prj_name%.log;

    #关闭gzip压缩输出，谨防数据被压缩
    gzip off; 

    #对 / 访问进行控制
    location / {

        #设定默认文档
        index  index.html index.php;
    
        #找不到文件时的尝试
        try_files $uri $uri/ @rewrite;

    }

    #对重写的新定义
    location @rewrite {
        set $static 0;

        if  ($uri ~ \.(css|js|jpg|jpeg|png|gif|ico|woff|eot|svg|css\.map|min\.map)$) {
            set $static 1;
        }

        if ($static = 0) {
            rewrite ^/(.*)$ /index.php?s=/$1;
        }
    }

    #禁止访问 .ht 程序文件
    location ~ /\.ht {
        deny  all;
    }

    #设定查看Nginx状态的地址
    location /NginxStatus {
        stub_status on;
        access_log on;
        auth_basic 'NginxStatus';
    }

    #对 .php/ 访问进行控制
    location ~ \.php/ {
        if ($request_uri ~ ^(.+\.php)(/.+?)($|\?)) { 
        }

        include nginx_php.conf;

        #安全问题：在PHP开启「cgi.fix_pathinfo」的情况下，PHP可能会把错误的文件类型当作PHP文件来解析。
        #如果Nginx和PHP安装在同一台服务器上的话，那么最简单的解决方法是用「try_files」指令做一次过滤 
        try_files $uri =404;

        fastcgi_param SCRIPT_NAME     $1;
        fastcgi_param PATH_INFO       $2;
        fastcgi_param SCRIPT_FILENAME $document_root$1;
    }

    #对 .php 访问进行控制
    location ~ \.php$ {
        include nginx_php.conf;

        #安全问题：在PHP开启「cgi.fix_pathinfo」的情况下，PHP可能会把错误的文件类型当作PHP文件来解析。
        #如果Nginx和PHP安装在同一台服务器上的话，那么最简单的解决方法是用「try_files」指令做一次过滤 
        try_files $uri =404;
    }
}	
